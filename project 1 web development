#include<iostream>
#include<bits/stdc++.h>
using namespace std;
// important for the recursion 


void Func(int i,vector <int> & ds,int arr[],int n){
    if (n==i){
       
        for (auto it : ds){
            cout <<it;
        }
        cout<<endl;
        return;
    }
 ds.push_back(arr[i]);
   Func(i+1,ds,arr,n);
   ds.pop_back();
   Func(i+1,ds,arr,n);
}


bool pallindrome(int i, string s){
 int n= s.length();
  if (i==n)
   return true;


if (s[i]==s[n-i-1])  return pallindrome(i+1,s);
else return false;


}

void SumSubset(int i,int sum,int arr[],vector<int >& ds, int n){

        if (i==n){
            if (sum%3==0){
            for (auto it:ds){
                cout<<it<<" ";
             }
            cout<<"sum ="<<sum <<endl;
            return;
           }

        } 
        ds.push_back(arr[i]);
        sum+=arr[i];
        SumSubset(i+1,sum,arr,ds,n);
        ds.pop_back();
        sum-=arr[i];
        SumSubset(i+1,sum,arr,ds,n);
}



int main(){

int arr[]={1,2,3,4,5,6,7,8,9};

// string pallindrome
string s="madam";
//cout<<s.length();
cout<< (bool)pallindrome(0,s);

//important recursion subset
vector<int> ds;
//Func(0,ds,arr,3);

//sum subset divisible by 3 
SumSubset(0,0,arr,ds,9);




// count sum problem 








}
